#!/usr/bin/env python

import argparse
import logging

from preprocess import preprocess


def main():
  """
  Main entry point for the CLI
  """
  # Parse command line options
  args = parse_args()

  # Configure logger
  config_logger(args)

  if args.action == 'preprocess':
    # Download and preprocess the dataset
    preprocess(cleanup=args.clean, skip_didi=args.skip_didi)


def parse_args():
  """
  Parse command line arguments
  -l/--log-level: Set the logging level

  Actions:
  - preprocess: Preprocess the dataset
  - TODO: Other actions
  """
  parser = argparse.ArgumentParser(
    prog='yolog',
    description='YoloGraph CLI utility')

  # Logger
  # Add an option to specify log level
  parser.add_argument('-l', '--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                      default='WARNING', help='Set the logging level (default: WARNING)')

  # Determine which action to take
  subparser = parser.add_subparsers(dest='action', required=True)

  # Command for preprocess command
  preprocess_parser = subparser.add_parser('preprocess')
  preprocess_parser.add_argument('--clean', action='store_true',
                                 help='Remove the dataset before preprocessing')
  preprocess_parser.add_argument('--skip-didi', action='store_true',
                                 help='Skip time consuming DIDI preprocessing')

  return parser.parse_args()


class CustomFormatter(logging.Formatter):
    """
    See
    https://alexandra-zaharia.github.io/posts/make-your-own-custom-color-formatter-with-python-logging/
    """

    grey = '\x1b[38;21m'
    blue = '\x1b[38;5;39m'
    yellow = '\x1b[38;5;226m'
    red = '\x1b[38;5;196m'
    bold_red = '\x1b[31;1m'
    reset = '\x1b[0m'

    def __init__(self, fmt):
        super().__init__(datefmt='%H:%M:%S')
        self.fmt = fmt
        self.FORMATS = {
            logging.DEBUG: self.grey + self.fmt + self.reset,
            logging.INFO: self.blue + self.fmt + self.reset,
            logging.WARNING: self.yellow + self.fmt + self.reset,
            logging.ERROR: self.red + self.fmt + self.reset,
            logging.CRITICAL: self.bold_red + self.fmt + self.reset
        }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


def config_logger(args):
  """
  Configure the logger

  - Add color to log
  - Tune log level on cmd line option
  """
  formatter = CustomFormatter('%(asctime)s | %(levelname)8s | %(message)s')

  # Set log level
  logging.basicConfig(level=args.log_level)
  logger = logging.getLogger()
  for handler in logger.handlers:
    # Add color to logs
    handler.setFormatter(formatter)


if __name__ == '__main__':
  main()
